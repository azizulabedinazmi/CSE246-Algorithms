Name : Azizul Abedin Azmi
ID : 2022-1-60-130
Section : 04

LAB03: Topic : 01

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Item {
    int profit;
    int weight;
};

bool compare(Item a, Item b) {
    double ratio1 = (double)a.profit / a.weight;
    double ratio2 = (double)b.profit / b.weight;
    return ratio1 > ratio2;
}

double fractionalKnapsack(vector<Item>& items, int W) {
    sort(items.begin(), items.end(), compare);

    double totalProfit = 0.0;
    int currentWeight = 0;

    for (int i = 0; i < items.size(); i++) {
        if (currentWeight + items[i].weight <= W) {
            currentWeight += items[i].weight;
            totalProfit += items[i].profit;
        } else {
            int remainingWeight = W - currentWeight;
            totalProfit += items[i].profit * ((double)remainingWeight / items[i].weight);
            break;
        }
    }

    return totalProfit;
}

int main() {
    vector<Item> items;
    int numItems;
    int W;

    cout << "Enter the number of items: ";
    cin >> numItems;

    cout << "Enter the profit and weight for each item:" << endl;
    for (int i = 0; i < numItems; i++) {
        Item item;
        cout << "Item " << i + 1 << ":" << endl;
        cout << "Profit: ";
        cin >> item.profit;
        cout << "Weight: ";
        cin >> item.weight;
        items.push_back(item);
    }

    cout << "Enter the capacity of the knapsack: ";
    cin >> W;

    double maxProfit = fractionalKnapsack(items, W);

    cout << "Maximum total profit in the knapsack: " << maxProfit << endl;

    return 0;
}

LAB03: Topic : 02

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Activity {
    int start;
    int finish;
};

bool compare(Activity a, Activity b) {
    return a.finish < b.finish;
}

int activitySelection(vector<Activity>& activities) {
    sort(activities.begin(), activities.end(), compare);

    int count = 1;
    int prevFinish = activities[0].finish;

    for (int i = 1; i < activities.size(); i++) {
        if (activities[i].start >= prevFinish) {
            count++;
            prevFinish = activities[i].finish;
        }
    }

    return count;
}

int main() {
    vector<Activity> activities = {{10, 20}, {12, 25}, {20, 30}};

    int maxActivities = activitySelection(activities);

    cout << "Maximum number of activities: " << maxActivities << endl;

    return 0;
}


LAB03: Topic : 03

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int findPlatforms(vector<float>& arrival, vector<float>& departure) {
    int n = arrival.size();
    sort(arrival.begin(), arrival.end());
    sort(departure.begin(), departure.end());

    int platforms = 1, count = 1;
    int i = 1, j = 0;

    while (i < n && j < n) {
        if (arrival[i] <= departure[j]) {
            count++;
            i++;
        } else {
            count--;
            j++;
        }

        if (count > platforms) {
            platforms = count;
        }
    }

    return platforms;
}

int main() {
    int n;
    cout << "Enter the number of train schedules: ";
    cin >> n;

    vector<float> arrival(n), departure(n);

    cout << "Enter the arrival times:\n";
    for (int i = 0; i < n; i++) {
        cin >> arrival[i];
    }

    cout << "Enter the departure times:\n";
    for (int i = 0; i < n; i++) {
        cin >> departure[i];
    }

    int minPlatforms = findPlatforms(arrival, departure);

    cout << "Minimum number of platforms needed: " << minPlatforms << endl;

    return 0;
}

